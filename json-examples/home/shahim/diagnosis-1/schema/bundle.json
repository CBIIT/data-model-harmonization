{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "http://ccdh/json/schema/bundle",
  "$comment": "Wrap lines in your editor to be able to see full comments since line breaks are not possible here. This is a schema bundle of all schemas, to help with using at: https://jschon.dev/ since IDEs don't give good validation results for complex schemas, or don't implement the specific version used here.  The way this works is the following. Under $defs there are independent schema resources that are indexed by a key that matches the suffix of the schema $id. The key names don't have to match, but for the schema entries under $def the keys should be kept that way to simplify with navigation.  Also, the naming pattern is meant to be self descriptive.  'vld' is meant to mean 'validate-' followed by what's being validated. 'is-' is meant to be a boolean check on something and it's mainly used for 'if' statements but might be useful in other places. 'codes-' are enums for values. 'structures' are structural definitions that were copied from the CCDH model build then simplified for this demo. Mainly, the structures needed for simplified Diagnoses examples to show the possible validations that JSON Schema can provide. The top level schema here, the one where this comment is placed, is empty and doesn't do anything beyond 'routing' to one of the schemas under $defs but it routes by $id rather than by #/$defs/...  So, find the schema you'd like to route to, or add your own, and then add or replace the '$ref' entry that is directly below this comment to point to the starting schema for your specific use case.  Then, copy this whole file's content and paste it in the left side at: https://jschon.dev and then paste your JSON example on the right side. Then run the validation to see the results. Make sure the option selected to the left of the 'Evaluate' button is the '2020-12' option, and the one to the right of the button is at least 'Basic' to see interesting results.",
  "$ref": "#/$defs/testing-env-v1",
  "$defs": {


    "vld-diagnosis": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis",
      "allOf": [
        {
          "$comment": "First we validate with the Diagnosis structure, mostly based on the CCDH built Diagnosis schema. Notice that the '$ref' use here, unlike the others, has a fragment part to point to the Diagnosis schema withing that 'schema resource'.",
          "$ref": "http://ccdh/json/schema/structures#/$defs/Diagnosis"
        },
        {
          "$comment": "Then we do general field value validation.",
          "$ref": "http://ccdh/json/schema/vld-diagnosis-values"
        },
        {
          "$comment": "Logical validation that applies specific rule based validations for specific aspects of a diagnosis json object, staging entries for example.",
          "$ref": "http://ccdh/json/schema/vld-diagnosis-logical"
        }
      ]
    },
    "vld-diagnosis-values": {
      "$comment": "This does basic, per field, harmonized value validation. If a field is supposed to have a harmonized value, or any other sort of simple initial value validation is needed, that should be checked here. 'logical validation' should not need to repeat this sort of validation, or it can refactor it out once it is implemented. Be careful about changing validation here if it is already depended on in the 'logical validation'. However, it might be more robust if 'logical validation', at least for now, still asserts it's 'preconditions' before applying it's own 'conditions' to make sure overall validation results are not as volatile (per sub schema) as this overall content is modified.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-values",
      "allOf": [
        {
          "$comment": "This one does value validation for the path 'diagnosis.condition' and is named accordingly",
          "$ref": "http://ccdh/json/schema/vld-diagnosis.condition-values"
        }
      ]
    },
    "vld-diagnosis.condition-values": {
      "$comment": "This validates the path diagnosis.condition. The path part 'diagnosis' is implied and is the root of the JOSN object being validated.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis.condition-values",
      "properties": {
        "condition": {
          "$comment": "The validatin approach here is that 'condition' is a single CodeableConcept (otherwise, we'd iterate here over the array of CCs) and we'll pass it on to one or more schemas that are dedicated to checking that the CC (and therefore the 'condition' field) has a harmonized value for conditions. In this specific implementation, the harmonized values for 'condition' are split/overlap between to is-* sub schemas dedicated for conditions that are stageable or non-stageable. This is just a choice I makde because it is useful to have those two sub schemas for later 'logical validation'. The point is that these sub schemas should be as small and reusable as possible. In JSON schema, you can think of all these sub schemas as boolean functions that apply their logic and return true/false. The input to these functions is the 'current' position in the JOSN object based on any previous traversal done by the 'properties' keyword.",
          "$ref": "http://ccdh/json/schema/is-condition-coding"
        }
      }
    },
    "vld-diagnosis.stage-values": {
      "$comment": "//TODO:",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis.stage.method_type-values",
      "maxContains": 1,
      "contains": {
        "$ref": "http://ccdh/json/schema/is-staging-system-coding"
      }
    },
    "vld-diagnosis-logical": {
      "$comment": "This does logical validation, based on the full content of the instance. For now, it's only implementing FIGO staging validation for a hypothetical \"cancer\" condition, and per primary_site value, to make sure that a 'cancer' condition for a specific FIGO 'site' is staged correctly based on FIGO rules for how a cancer at a specific FIGO site should be staged. Or, if it is not a 'cancer' condition, no staging data is allowed.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-logical",
      "allOf": [
        {
          "if": {
            "properties": {
              "condition": {
                "$ref": "http://ccdh/json/schema/is-stageable-condition-coding"
              }
            }
          },
          "then": {
            "$ref": "http://ccdh/json/schema/vld-diagnosis-staging"
          },
          "else": {
            "$comment": "Else 'stage' must not be present in the diagnosis instance.",
            "properties": {
              "stage": {
                "not": {}
              }
            }
          }
        }
      ]
    },
    "vld-diagnosis-staging": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-staging",
      "allOf": [
        {
          "$comment": "First we check if staging system is valid.",
          "if": {
          },
          "then": true,
          "else": false
        }
      ]
    },
    "is-staging-system-coding": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-staging-system-coding",
      "properties": {
        "coding": {
          "maxContains": 1,
          "contains": {
            "required": [
              "system",
              "code"
            ],
            "properties": {
              "system": {
                "const": "http://ccdh/cs/staging-system"
              },
              "code": {
                "$ref": "http://ccdh/json/schema/is-staging-system-code"
              }
            }
          }
        }
      }
    },
    "is-staging-system-code": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-staging-system-code",
      "$ref": "http://ccdh/json/schema/codes-staging-system-enum"
    },
    "is-stageable-condition-coding": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-stageable-condition-coding",
      "properties": {
        "coding": {
          "maxContains": 1,
          "contains": {
            "required": [
              "system",
              "code"
            ],
            "properties": {
              "system": {
                "const": "http://ccdh/cs/condition"
              },
              "code": {
                "$ref": "http://ccdh/json/schema/is-stageable-condition-code"
              }
            }
          }
        }
      }
    },
    "is-condition-coding": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-condition-coding",
      "properties": {
        "coding": {
          "maxContains": 1,
          "contains": {
            "properties": {
              "system": {
                "const": "http://ccdh/cs/condition"
              },
              "code": {
                "$ref": "http://ccdh/json/schema/is-condition-code"
              }
            },
            "required": [
              "system",
              "code"
            ]
          }
        }
      }
    },
    "is-stageable-condition-code": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-stageable-condition-code",
      "$ref": "http://ccdh/json/schema/codes-stageable-condition-enum"
    },
    "is-condition-code": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-condition-code",
      "$ref": "http://ccdh/json/schema/codes-condition-enum"
    },
    "codes-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-body-site-enum",
      "$comment": "system is: http://ccdh/cs/body-site",
      "enum": [
        "lung"
      ]
    },
    "codes-figo-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-body-site-enum",
      "$comment": "system is: http://ccdh/cs/body-site",
      "enum": [
        "ovary",
        "endometrium",
        "cervix",
        "vagina",
        "vulva"
      ]
    },
    "codes-figo-2018-stage-vulval-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-vulval-enum",
      "enum": [
        "I",
        "IA",
        "IB"
      ]
    },
    "codes-figo-2018-stage-vaginal-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-vaginal-enum",
      "enum": [
        "0",
        "I",
        "IB1",
        "IB2",
        "IB3"
      ]
    },
    "codes-figo-pre2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-pre2018-stage-cervical-enum",
      "enum": [
        "0",
        "I",
        "IA",
        "IA1",
        "IA2",
        "IB"
      ]
    },
    "codes-figo-2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-cervical-enum",
      "enum": [
        "I",
        "IA",
        "IA1",
        "IA2",
        "IB"
      ]
    },
    "codes-figo-2018-stage-endometrial-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-endometrial-enum",
      "enum": [
        "0",
        "I",
        "IA",
        "IB"
      ]
    },
    "codes-figo-2018-stage-ovarian-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-ovarian-enum",
      "enum": [
        "I",
        "IA",
        "IB",
        "IC",
        "IC1",
        "IC2",
        "IC3"
      ]
    },
    "codes-figo-2018-stage-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-enum",
      "enum": [
        "0",
        "I",
        "IA",
        "IA1",
        "IA2",
        "IB",
        "IB1",
        "IB2",
        "IB3",
        "IC",
        "IC1",
        "IC2",
        "IC3"
      ]
    },
    "codes-figo-version-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-version-enum",
      "enum": [
        "2018",
        "pre2018"
      ]
    },
    "codes-staging-system-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-staging-system-enum",
      "enum": [
        "AJCC",
        "FIGO"
      ]
    },
    "codes-staging-system-component-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-staging-system-component-enum",
      "enum": [
        "overall",
        "T",
        "N",
        "M"
      ]
    },
    "codes-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-stageable-condition-enum",
      "enum": [
        "cancer"
      ]
    },
    "codes-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-condition-enum",
      "enum": [
        "benign"
      ]
    },

    "=================================================": {
      "The below is not used yet": "Ignore"
    },
    "codings-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-body-site-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/body-site",
          "code": "lung",
          "label": "Lung body site"
        }
      ]
    },
    "codings-figo-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-body-site-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/body-site",
          "code": "ovary",
          "label": "Ovary body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "endometrium",
          "label": "Endometrium body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "cervix",
          "label": "Cervix body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "vagina",
          "label": "Vagina body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "vulva",
          "label": "Vulva body site"
        }
      ]
    },
    "codings-figo-2018-stage-vulval-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-vulval-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-vaginal-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-vaginal-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB1",
          "label": "Stage IB1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB2",
          "label": "Stage IB2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB3",
          "label": "Stage IB3"
        }
      ]
    },
    "codings-figo-pre2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-pre2018-stage-cervical-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA1",
          "label": "Stage IA1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA2",
          "label": "Stage IA2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-cervical-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA1",
          "label": "Stage IA1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA2",
          "label": "Stage IA2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-endometrial-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-endometrial-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-ovarian-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-ovarian-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC",
          "label": "Stage IC"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC1",
          "label": "Stage IC1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC2",
          "label": "Stage IC2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC3",
          "label": "Stage IC3"
        }
      ]
    },
    "codings-figo-2018-stage-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA1",
          "label": "Stage IA1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA2",
          "label": "Stage IA2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB1",
          "label": "Stage IB1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB2",
          "label": "Stage IB2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB3",
          "label": "Stage IB3"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC",
          "label": "Stage IC"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC1",
          "label": "Stage IC1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC2",
          "label": "Stage IC2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC3",
          "label": "Stage IC3"
        }
      ]
    },
    "codings-figo-version-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-version-enumm",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-version",
          "code": "2018",
          "label": "Version 2018"
        },
        {
          "system": "http://ccdh/cs/figo-version",
          "code": "pre2018",
          "label": "Version pre2018"
        }
      ]
    },
    "codings-staging-system-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-staging-system-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/staging-system",
          "code": "AJCC",
          "label": "AJCC Staging System"
        },
        {
          "system": "http://ccdh/cs/staging-system",
          "code": "FIGO",
          "label": "FIGO Staging System"
        }
      ]
    },
    "codings-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-stageable-condition-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/condition",
          "code": "cancer",
          "label": "Cancer Condition"
        }
      ]
    },
    "codings-non-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-non-stageable-condition-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/condition",
          "code": "benign",
          "label": "Benign Condition"
        }
      ]
    }
  }
}