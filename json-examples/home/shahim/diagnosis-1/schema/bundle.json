{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "http://ccdh/json/schema/bundle",
  "$comment": "Wrap lines in your editor to be able to see full comments since line breaks are not possible here. This is a schema bundle of all schemas, to help with using at: https://jschon.dev/ since IDEs don't give good validation results for complex schemas, or don't implement the specific version used here.  The way this works is the following. Under $defs there are independent schema resources that are indexed by a key that matches the suffix of the schema $id. The key names don't have to match, but for the schema entries under $def the keys should be kept that way to simplify with navigation.  Also, the naming pattern is meant to be self descriptive.  'vld' is meant to mean 'validate-' followed by what's being validated. 'is-' is meant to be a boolean check on something and it's mainly used for 'if' statements but might be useful in other places. 'codes-' are enums for values. 'structures' are structural definitions that were copied from the CCDH model build then simplified for this demo. Mainly, the structures needed for simplified Diagnoses examples to show the possible validations that JSON Schema can provide. The top level schema here, the one where this comment is placed, is empty and doesn't do anything beyond 'routing' to one of the schemas under $defs but it routes by $id rather than by #/$defs/...  So, find the schema you'd like to route to, or add your own, and then add or replace the '$ref' entry that is directly below this comment to point to the starting schema for your specific use case.  Then, copy this whole file's content and paste it in the left side at: https://jschon.dev and then paste your JSON example on the right side. Then run the validation to see the results. Make sure the option selected to the left of the 'Evaluate' button is the '2020-12' option, and the one to the right of the button is at least 'Basic' to see interesting results.",
  "$ref": "http://ccdh/json/schema/vld-diagnosis-examples-valid",
  "$defs": {
    "_template": {
      "$comment": "Ignore this entry. It's just a possibly useful template.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/"
    },
    "vld-diagnosis-examples-valid": {
      "$comment": "This takes a json object and looks under 'Diagnosis' for a naming pattern to do testing of multiple diagnosis instances. The naming pattern for the keys in the top object has to be: 1. start with test- to try to run it, for those, if it ends with -valid, it's tested that the example is valid. If it ends with -invalid, it's tested to make sure it is invalid, i.e. it's validity is negated as you see below. To turn off an entry, add the off- prefix. Other entries that don't follow the above will be considered invalid by the 'structures.json' schema file, and here, to make sure editors don't accidentally not follow this pattern.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-examples-valid",
      "type": "object",
      "properties": {
        "Diagnosis": {
          "patternProperties": {
            "^test-.*-valid$": {
              "$ref": "http://ccdh/json/schema/vld-diagnosis-example"
            },
            "^test-.*-invalid$": {
              "not": {
                "$ref": "http://ccdh/json/schema/vld-diagnosis-example"
              }
            },
            "^off-": {
              "$comment": "To make sure we can detect naming errors, with the additionalProperties entry"
            }
          },
          "additionalProperties": {
            "not": {}
          }
        }
      }
    },
    "vld-diagnosis-example": {
      "$comment": "The starting schema/validator for the diagnosis-1-coding-based-example-*.json files. It directly routs to the general Diagnosis validator.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-example",
      "$ref": "http://ccdh/json/schema/vld-diagnosis"
    },
    "vld-diagnosis": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis",
      "allOf": [
        {
          "$comment": "First we validate with the Diagnosis structure, mostly based on the CCDH built Diagnosis schema. Notice that the '$ref' use here, unlike the others, has a fragment part to point to the Diagnosis schema withing that 'schema resource'.",
          "$ref": "http://ccdh/json/schema/structures#/$defs/Diagnosis"
        },
        {
          "$comment": "Then we do general field value validation.",
          "$ref": "http://ccdh/json/schema/vld-diagnosis-values"
        },
        {
          "$comment": "Logical validation that applies specific rule based validations for specific aspects of a diagnosis json object, staging entries for example.",
          "$ref": "http://ccdh/json/schema/vld-diagnosis-logical"
        }
      ]
    },
    "vld-diagnosis-values": {
      "$comment": "This does basic, per field, harmonized value validation. If a field is supposed to have a harmonized value, or any other sort of simple initial value validation is needed, that should be checked here. 'logical validation' should not need to repeat this sort of validation, or it can refactor it out once it is implemented. Be careful about changing validation here if it is already depended on in the 'logical validation'. However, it might be more robust if 'logical validation', at least for now, still asserts it's 'preconditions' before applying it's own 'conditions' to make sure overall validation results are not as volatile (per sub schema) as this overall content is modified.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-values",
      "allOf": [
        {
          "$comment": "This one does value validation for the path 'diagnosis.condition' and is named accordingly",
          "$ref": "http://ccdh/json/schema/vld-diagnosis.condition-values"
        }
      ]
    },
    "vld-diagnosis.condition-values": {
      "$comment": "This validates the path diagnosis.condition. The path part 'diagnosis' is implied and is the root of the JOSN object being validated.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis.condition-values",
      "properties": {
        "condition": {
          "$comment": "The validatin approach here is that 'condition' is a single CodeableConcept (otherwise, we'd iterate here over the array of CCs) and we'll pass it on to one or more schemas that are dedicated to checking that the CC (and therefore the 'condition' field) has a harmonized value for conditions. In this specific implementation, the harmonized values for 'condition' are split/overlap between to is-* sub schemas dedicated for conditions that are stageable or non-stageable. This is just a choice I makde because it is useful to have those two sub schemas for later 'logical validation'. The point is that these sub schemas should be as small and reusable as possible. In JSON schema, you can think of all these sub schemas as boolean functions that apply their logic and return true/false. The input to these functions is the 'current' position in the JOSN object based on any previous traversal done by the 'properties' keyword.",
          "anyOf": [
            {
              "$ref": "http://ccdh/json/schema/is-stageable-condition-coding"
            },
            {
              "$ref": "http://ccdh/json/schema/is-non-stageable-condition-coding"
            }
          ]
        }
      }
    },
    "vld-diagnosis-logical": {
      "$comment": "This does logical validation, based on the full content of the instance. For now, it's only implementing FIGO staging validation for a hypothetical \"cancer\" condition, and per primary_site value, to make sure that a 'cancer' condition for a specific FIGO 'site' is staged correctly based on FIGO rules for how a cancer at a specific FIGO site should be staged. Or, if it is not a 'cancer' condition, no staging data is allowed.",
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-logical",
      "allOf": [
        {
          "if": {
            "properties": {
              "condition": {
                "$ref": "http://ccdh/json/schema/is-stageable-condition-coding"
              }
            }
          },
          "then": {
            "$ref": "http://ccdh/json/schema/vld-diagnosis-staging"
          },
          "else": {
            "$comment": "Else 'stage' is either null or not present.",
            "properties": {
              "stage": {
                "not": {}
              }
            }
          }
        }
      ]
    },
    "vld-diagnosis-staging": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-diagnosis-staging",
      "properties": {
        "primary_side": {},
        "stage": {
          "$ref": "http://ccdh/json/schema/vld-staging"
        }
      }
    },
    "vld-staging": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/vld-staging"
    },
    "is-stageable-condition-coding": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-stageable-condition-coding",
      "properties": {
        "coding": {
          "maxContains": 1,
          "contains": {
            "required": [
              "system",
              "code"
            ],
            "properties": {
              "system": {
                "const": "http://ccdh/cs/condition"
              },
              "code": {
                "$ref": "http://ccdh/json/schema/is-stageable-condition-code"
              }
            }
          }
        }
      }
    },
    "is-non-stageable-condition-coding": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-non-stageable-condition-coding",
      "properties": {
        "coding": {
          "maxContains": 1,
          "contains": {
            "properties": {
              "system": {
                "const": "http://ccdh/cs/condition"
              },
              "code": {
                "$ref": "http://ccdh/json/schema/is-non-stageable-condition-code"
              }
            },
            "required": [
              "system",
              "code"
            ]
          }
        }
      }
    },
    "is-stageable-condition-code": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-stageable-condition-code",
      "$ref": "http://ccdh/json/schema/codes-stageable-condition-enum"
    },
    "is-non-stageable-condition-code": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/is-non-stageable-condition-code",
      "$ref": "http://ccdh/json/schema/codes-non-stageable-condition-enum"
    },
    "codes-figo-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-body-site-enum",
      "enum": [
        "ovary",
        "endometrium",
        "cervix",
        "vagina",
        "vulva"
      ]
    },
    "codes-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-body-site-enum",
      "enum": [
        "lung"
      ]
    },
    "codes-figo-2018-stage-vulval-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-vulval-enum",
      "enum": [
        "I",
        "IA",
        "IB"
      ]
    },
    "codes-figo-2018-stage-vaginal-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-vaginal-enum",
      "enum": [
        "0",
        "I",
        "IB1",
        "IB2",
        "IB3"
      ]
    },
    "codes-figo-pre2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-pre2018-stage-cervical-enum",
      "enum": [
        "0",
        "I",
        "IA",
        "IA1",
        "IA2",
        "IB"
      ]
    },
    "codes-figo-2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-cervical-enum",
      "enum": [
        "I",
        "IA",
        "IA1",
        "IA2",
        "IB"
      ]
    },
    "codes-figo-2018-stage-endometrial-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-endometrial-enum",
      "enum": [
        "0",
        "I",
        "IA",
        "IB"
      ]
    },
    "codes-figo-2018-stage-ovarian-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-ovarian-enum",
      "enum": [
        "I",
        "IA",
        "IB",
        "IC",
        "IC1",
        "IC2",
        "IC3"
      ]
    },
    "codes-figo-2018-stage-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-2018-stage-enum",
      "enum": [
        "0",
        "I",
        "IA",
        "IA1",
        "IA2",
        "IB",
        "IB1",
        "IB2",
        "IB3",
        "IC",
        "IC1",
        "IC2",
        "IC3"
      ]
    },
    "codes-figo-version-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-figo-version-enum",
      "enum": [
        "2018",
        "pre2018"
      ]
    },
    "codes-staging-system-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-staging-system-enum",
      "enum": [
        "AJCC",
        "FIGO"
      ]
    },
    "codes-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-stageable-condition-enum",
      "enum": [
        "cancer"
      ]
    },
    "codes-non-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codes-non-stageable-condition-enum",
      "enum": [
        "benign"
      ]
    },
    "structures": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/structures",
      "$defs": {
        "BodySite": {
          "additionalProperties": false,
          "description": "A site in the body of an organism, typically described in terms of an anatomical location and optional qualifiers (e.g. left/right, upper/lower). But body sites as defined here may include 'non-anatomic' sites, such as the location of an implanted medical device.",
          "properties": {
            "qualifier": {
              "description": "A qualifier that further refines or specifies the location of the body site (e.g. to indicate laterality, upper v. lower, containment, etc).",
              "items": {
                "$ref": "#/$defs/CodeableConcept"
              },
              "type": "array"
            },
            "site": {
              "description": "A term describing any site in the body.",
              "$ref": "#/$defs/CodeableConcept"
            }
          },
          "required": [
            "site"
          ],
          "title": "BodySite",
          "type": "object"
        },
        "CodeableConcept": {
          "additionalProperties": false,
          "description": "A representation of a concept that may be defined by or mapped to one or more codes in code systems (terminologies, ontologies, dictionaries, code sets, etc) - but may also be defined by the provision of text.",
          "properties": {
            "coding": {
              "description": "A reference to a code defined by a terminology system",
              "items": {
                "$ref": "#/$defs/Coding"
              },
              "type": "array"
            },
            "text": {
              "description": "A human language representation of the concept represented by the Coding.",
              "type": "string"
            }
          },
          "required": [],
          "title": "CodeableConcept",
          "type": "object"
        },
        "Coding": {
          "additionalProperties": false,
          "description": "A structured representation of a coded/enumerated data value, that includes additional metadata about the code and code system.",
          "properties": {
            "code": {
              "description": "The symbol/value of the code, as defined by the code system.",
              "type": "string"
            },
            "label": {
              "description": "A human-readable name for the code, as defined by the code system.",
              "type": "string"
            },
            "system": {
              "description": "The code system where the code is defined.",
              "type": "string"
            },
            "systemURL": {
              "description": "A URL where the code system can be found.",
              "type": "string"
            },
            "systemVersion": {
              "description": "The version of the code system.",
              "type": "string"
            }
          }
        },
        "Diagnosis": {
          "additionalProperties": false,
          "description": "A collection of characteristics that describe an abnormal condition of the body as assessed at a point in time. May be used to capture information about neoplastic and non-neoplastic conditions.",
          "properties": {
            "vld-notes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "$schema": {
              "type": "string"
            },
            "condition": {
              "description": "Code that captures the condition being diagnosed (e.g. ICD-O, ICD-10, SNOMED, etc.)",
              "$ref": "#/$defs/CodeableConcept"
            },
            "disease_status": {
              "description": "A term that refers to the nature and/or clinical outcome of a disease (e.g., primary disease, metastatic disease, recurrent disease, etc.)",
              "$ref": "#/$defs/CodeableConcept"
            },
            "id": {
              "description": "The 'logical' identifier of the entity within the system of record.  The simple value of this attribute stands for an identifier of this data object within the system, it can be used as a reference from other objects within the same system (i.e. primary and foreign keys), and it should be unique per type of object. The same data object copied to a different system will likely have a different \"id\" in the new system since \"id\" values are system specific and do not represent persistent business identifiers. Business identifiers are assigned outside the information system and are captured in the \"identifier\" field. The \"id\" field is more likely to be a serially or randomly generated value that is assigned to the data object as it is created in a system.",
              "type": "string"
            },
            "metastatic_site": {
              "description": "The anatomical location(s) of metastatic disease",
              "items": {
                "$ref": "#/$defs/BodySite"
              },
              "type": "array"
            },
            "method_of_diagnosis": {
              "description": "The method used to confirm the patients malignant diagnosis",
              "$ref": "#/$defs/CodeableConcept"
            },
            "morphology": {
              "description": "Code that represents the histology of the disease using the third edition of the International Classification of Diseases for Oncology, published in 2000, used principally in tumor and cancer registries for coding the site (topography) and the histology (morphology) of neoplasms.",
              "$ref": "#/$defs/CodeableConcept"
            },
            "primary_site": {
              "description": "The anatomical location of the primary condition",
              "items": {
                "$ref": "#/$defs/BodySite"
              },
              "type": "array"
            },
            "stage": {
              "description": "The extent of a cancer in the body. Staging is usually based on the size of the tumor, whether lymph nodes contain cancer, and whether the cancer has spread from the original site to other parts of the body.",
              "items": {
                "$ref": "#/$defs/ObservationSet"
              },
              "type": "array"
            }
          },
          "required": [],
          "title": "Diagnosis",
          "type": "object"
        },
        "Observation": {
          "additionalProperties": false,
          "description": "A structured object that describes a single data item about an entity, as generated through a point-in-time observation, measurement, or interpretation.",
          "properties": {
            "category": {
              "description": "The general category of observation described",
              "$ref": "#/$defs/CodeableConcept"
            },
            "id": {
              "description": "The 'logical' identifier of the entity within the system of record.  The simple value of this attribute stands for an identifier of this data object within the system, it can be used as a reference from other objects within the same system (i.e. primary and foreign keys), and it should be unique per type of object. The same data object copied to a different system will likely have a different \"id\" in the new system since \"id\" values are system specific and do not represent persistent business identifiers. Business identifiers are assigned outside the information system and are captured in the \"identifier\" field. The \"id\" field is more likely to be a serially or randomly generated value that is assigned to the data object as it is created in a system.",
              "type": "string"
            },
            "method_type": {
              "description": "A type of method used in generating the Observation result.",
              "items": {
                "$ref": "#/$defs/CodeableConcept"
              },
              "type": "array"
            },
            "observation_type": {
              "description": "The specific type of observation made - i.e. the feature or characteristic that was observed, measured, estimated, etc..",
              "$ref": "#/$defs/CodeableConcept"
            },
            "valueBoolean": {
              "description": "The result of the observation, encoded as a boolean.",
              "type": "boolean"
            },
            "valueCodeableConcept": {
              "description": "The result of the observation, encoded as a CodeableConcept.",
              "$ref": "#/$defs/CodeableConcept"
            },
            "valueDateTime": {
              "description": "The result of the observation, encoded as a dateTime.",
              "type": "string"
            },
            "valueDecimal": {
              "description": "The result of the observation, encoded as a decimal.",
              "type": "string"
            },
            "valueInteger": {
              "description": "The result of the observation, encoded as a decimal.",
              "type": "string"
            },
            "valueString": {
              "description": "The result of the observation, encoded as a free-text string.",
              "type": "string"
            }
          },
          "required": [
            "observation_type"
          ],
          "title": "Observation",
          "type": "object"
        },
        "ObservationSet": {
          "additionalProperties": false,
          "description": "A structured object to hold related data items about an entity, as generated through a point-in-time observation, measurement, or interpretation.",
          "properties": {
            "category": {
              "description": "The general category of observation set described",
              "$ref": "#/$defs/CodeableConcept"
            },
            "id": {
              "description": "The 'logical' identifier of the entity within the system of record.  The simple value of this attribute stands for an identifier of this data object within the system, it can be used as a reference from other objects within the same system (i.e. primary and foreign keys), and it should be unique per type of object. The same data object copied to a different system will likely have a different \"id\" in the new system since \"id\" values are system specific and do not represent persistent business identifiers. Business identifiers are assigned outside the information system and are captured in the \"identifier\" field. The \"id\" field is more likely to be a serially or randomly generated value that is assigned to the data object as it is created in a system.",
              "type": "string"
            },
            "method_type": {
              "description": "A type of method used in generating each of the Observations bundled in the set.",
              "items": {
                "$ref": "#/$defs/CodeableConcept"
              },
              "type": "array"
            },
            "observations": {
              "description": "A set of one or more more atomic observations that are conceptually or logically related - e.g. two components of some compound measurement (e.g. the systolic and diastolic components of a blood pressure measurement), or a panel of related measurements run and interpreted together on the same subject/specimen (e.g. a blood panel, or separate dimensional measurements of a specimen).",
              "items": {
                "$ref": "#/$defs/Observation"
              },
              "type": "array"
            }
          },
          "required": [
            "id",
            "category"
          ],
          "title": "ObservationSet",
          "type": "object"
        }
      }
    },
    "codings-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-body-site-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/body-site",
          "code": "lung",
          "label": "Lung body site"
        }
      ]
    },
    "codings-figo-body-site-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-body-site-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/body-site",
          "code": "ovary",
          "label": "Ovary body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "endometrium",
          "label": "Endometrium body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "cervix",
          "label": "Cervix body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "vagina",
          "label": "Vagina body site"
        },
        {
          "system": "http://ccdh/cs/body-site",
          "code": "vulva",
          "label": "Vulva body site"
        }
      ]
    },
    "=================================================": {
      "The below is not used yet": "Ignore"
    },
    "codings-figo-2018-stage-vulval-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-vulval-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-vaginal-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-vaginal-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB1",
          "label": "Stage IB1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB2",
          "label": "Stage IB2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB3",
          "label": "Stage IB3"
        }
      ]
    },
    "codings-figo-pre2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-pre2018-stage-cervical-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA1",
          "label": "Stage IA1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA2",
          "label": "Stage IA2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-cervical-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-cervical-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA1",
          "label": "Stage IA1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA2",
          "label": "Stage IA2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-endometrial-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-endometrial-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        }
      ]
    },
    "codings-figo-2018-stage-ovarian-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-ovarian-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC",
          "label": "Stage IC"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC1",
          "label": "Stage IC1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC2",
          "label": "Stage IC2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC3",
          "label": "Stage IC3"
        }
      ]
    },
    "codings-figo-2018-stage-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-2018-stage-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "0",
          "label": "Stage 0"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "I",
          "label": "Stage I"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA",
          "label": "Stage IA"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA1",
          "label": "Stage IA1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IA2",
          "label": "Stage IA2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB",
          "label": "Stage IB"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB1",
          "label": "Stage IB1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB2",
          "label": "Stage IB2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IB3",
          "label": "Stage IB3"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC",
          "label": "Stage IC"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC1",
          "label": "Stage IC1"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC2",
          "label": "Stage IC2"
        },
        {
          "system": "http://ccdh/cs/figo-stage",
          "code": "IC3",
          "label": "Stage IC3"
        }
      ]
    },
    "codings-figo-version-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-figo-version-enumm",
      "enum": [
        {
          "system": "http://ccdh/cs/figo-version",
          "code": "2018",
          "label": "Version 2018"
        },
        {
          "system": "http://ccdh/cs/figo-version",
          "code": "pre2018",
          "label": "Version pre2018"
        }
      ]
    },
    "codings-staging-system-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-staging-system-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/staging-system",
          "code": "AJCC",
          "label": "AJCC Staging System"
        },
        {
          "system": "http://ccdh/cs/staging-system",
          "code": "FIGO",
          "label": "FIGO Staging System"
        }
      ]
    },
    "codings-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-stageable-condition-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/condition",
          "code": "cancer",
          "label": "Cancer Condition"
        }
      ]
    },
    "codings-non-stageable-condition-enum": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "http://ccdh/json/schema/codings-non-stageable-condition-enum",
      "enum": [
        {
          "system": "http://ccdh/cs/condition",
          "code": "benign",
          "label": "Benign Condition"
        }
      ]
    }
  }
}